<h1>Expected Result Patient List</h1>
<div class="pull-right button-row">
  <% if @measure && @measure.sub_id %>
    <div class="btn-group">
      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">Sub measures <span class="caret"></span>
      </button>
      <ul class="dropdown-menu">
        <% submeasures = HealthDataStandards::CQM::Measure.where(hqmf_id: @measure.hqmf_id).sort_by(&:sub_id) %>
        <% submeasures.each do |submeasure| %>
          <li><%= link_to "#{submeasure.display_name} - #{submeasure.subtitle}", product_test_task_by_filter_task_path(@task.product_test, @task, sub_id: submeasure.sub_id),  method: :get %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  <%= button_to good_results_task_path(@task), :method => :get, :class => "btn btn-default" do %>
    <i class="fa fa-fw fa-download" aria-hidden="true"></i> Download HTML Patients
  <% end %>
</div>

<% cache [@records, @measure, hide_patient_calculation?] do %>
  <div class="row">
    <div id="records_list" class="col-sm-12">
      <%= render partial: 'records_list', locals: { records: @records } %>
    </div>
  </div>
<% end #cache records %>

<script type="text/javascript">
  // initialize jQueryUI Autocomplete for searching measures
  $('#search_measures').autocomplete({
    delay: 500,
    source: <%= @measure_dropdown %>, // autocomplete suggestions
    select: function(event, data) {  // fired on item select
      // gets records by measure via AJAX and rerender the records list.
      // data.item.value provides the URL for the selected measure
      $.get(data.item.value);
      // autocomplete's default action is to populate the input with the selected value
      // prevent the user from seeing an ugly URL in their search box here
      event.preventDefault();
    },
    focus: function(event, data) { event.preventDefault(); } // fired on item focus
  });

  // add and remove some classes from the generated autocomplete widget
  $('#search_measures').data('ui-autocomplete')._renderItem = function(ul, item) {
    return $('<li class="list-group-item">').append(item.label).appendTo(ul);
  }
  $('#search_measures').data('ui-autocomplete')._renderMenu = function(ul, items) {
    var that = this;
    $.each(items, function(index, item) {
      that._renderItemData(ul, item);
    });
    $(ul).removeClass('ui-widget ui-widget-content').addClass('list-group');
  }

  // rerender the records list to show records from all measures if no value searched
  $('#search_measures').on('blur', function() {
    if (!$(this).val()) {
      $("#records_list").html("<%= escape_javascript(render partial: 'records_list', locals: { records: @records } ) %>");
    }
  })
</script>
